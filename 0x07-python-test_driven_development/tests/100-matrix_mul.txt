Test Cases for 100-matrix_mul.py module
=======================================

This module implements doctest to run unittests on ``100-matrix_mul`` module

Usage
=====

Importing ``100-matrix_mul`` module
	>>> mul = __import__('100-matrix_mul').matrix_mul

Testing with everything alright
	>>> a = [[1, 2, 3], [4, 7, 8], [47, 5, 2]]
	>>> b = [[1.7, 0.0], [4.6, 5], [1, 3]]
	>>> print(mul(a, b))
	[[13.899999999999999, 19.0], [46.99999999999999, 59.0], [104.89999999999999, 31.0]]

Testing with incompatible matrices
	>>> a = [[1, 2], [4, 7], [47, 5]]
	>>> b = [[1.7, 0.0], [4.6, 5], [1, 3]]
	>>> print(mul(a, b))
	Traceback (most recent call last):
	...
	ValueError: m_a and m_b can't be multiplied

Testing with wrong types
	>>> a = ([1, 2, 3], [4, 7], [47, 5])
	>>> b = [[1.7, 0.0], [4.6, 5], [1, 3]]
	>>> print(mul(a, b))
	Traceback (most recent call last):
	...
	TypeError: m_a must be a list

	>>> a = [(1, 2), [4, 7], [47, 5]]
	>>> b = [[1.7, 0.0], [4.6, 5], [1, 3]]
	>>> print(mul(b, a))
	Traceback (most recent call last):
	...
	TypeError: m_b must be a list of lists

	>>> a = [[1, 'x'], [4, 7], [47, 5]]
	>>> b = [[1.7, 0.0], [4.6, 5], [1, 3]]
	>>> print(mul(a, b))
	Traceback (most recent call last):
	...
	TypeError: m_a should contain only integers or floats

Testing with irregularly sized matrices
	>>> a = [[1, 2, 3], [4, 7, 8], [47, 5]]
	>>> b = [[1.7, 0.0], [4.6, 5], [1, 3]]
	>>> print(mul(a, b))
	Traceback (most recent call last):
	...
	TypeError: each row of m_a must be of the same size

Testing with empty arguments
	>>> a = []
	>>> b = [[1, 2, 30]]
	>>> print(mul(a, b))
	Traceback (most recent call last):
	...
	ValueError: m_a cannot be empty

	>>> print(mul(b, a))
	Traceback (most recent call last):
	...
	ValueError: m_b cannot be empty
